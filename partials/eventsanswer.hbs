<div class="w-full inline-block py-5 relative">
    <div class="container mx-auto px-4">
        <div class="flex flex-row -mx-4 justify-between relative">
            <div class="navigation-container px-4"></div>
            <div class="searchbar-container px-4 z-10"></div>
        </div>
    </div>
</div>
<div class="w-full inline-block py-5 relative">
    <div class="container mx-auto px-4">
        <div class="answers">
            <div class="spell-check-container"></div>
            <div class="direct-answer-container"></div>
            <div class="map-container"></div>
        </div>
        <div class="filters-and-results-layout flex flex-wrap">
            <div class="w-1/4">
                <div class="filter-container"></div>
                <div class="facets-container"></div>
                <div class="sortoptions-container"></div>
            </div>
            <div class="w-3/4">
                <div class="vertical-container"></div>
                <div class="pagination-container"></div>
            </div>
        </div>
    </div>
</div>

<div class="locationbias-container"></div>

<script>
    ANSWERS.init({
        apiKey: "sandbox-c60cbe94e016d1e3c9e6939885a56b0c",
        experienceKey: "healthcare-professional",
        businessId: "3145037",
        experienceVersion: "STAGING",
        verticalKey: "events",


        verticalPages: [
            {
                label: "All",
                url: "index.html",
                isFirst: true,
                isActive: false,
                hideInNavigation: false,
                target: "_self",
            },
            {
                label: "Hospital",
                url: "hospitallisting.html",
                verticalKey: "faqs",
                icon: "pin",
                // iconUrl: "",
                isFirst: false,
                isActive: false,
                hideInNavigation: false,
                target: "_blank",
            },
            {
                label: "Doctors",
                url: "doctorlisting.html",
                verticalKey: "healthcare_professionals",
                icon: "support",
                // iconUrl: "",
                isFirst: false,
                isActive: false,
                hideInNavigation: false,
                target: "_blank",
            },
            //verticals for events
            {
                label: "Jobs",
                url: "jobslisting.html",
                verticalKey: "events",
                icon: "support",
                // iconUrl: "",
                isFirst: false,
                isActive: false,
                hideInNavigation: false,
                target: "_blank",
            },
            //verticals for jobs
            {
                label: "Faq's",
                url: "faqlisting.html",
                verticalKey: "jobs",
                icon: "support",
                // iconUrl: "",
                isFirst: false,
                isActive: false,
                hideInNavigation: false,
                target: "_blank",
            },
            //verticals for products
            {
                label: "Events",
                url: "eventlisting.html",
                verticalKey: "products",
                icon: "support",
                // iconUrl: "",
                isFirst: false,
                isActive: true,
                hideInNavigation: false,
                target: "_blank",
            }


        ],






        search: {
            verticalKey: "events",
            defaultInitialSearch: "",
            limit: 10
        },
        onReady: function () {
            // init components











            this.addComponent("SearchBar", {
                container: ".searchbar-container",
                allowEmptySearch: true,
                verticalKey: "events",



                // searchText: "Search",
                // query: "Peaceful Coffee",
                // filter: {
                //     name: {
                //         $eq: "Peaceful Coffee"
                //     }
                // },



                placeholderText: "Search for events",
                searchParameters: {
                    // List of fields to query for
                    sectioned: true,
                    fields: [
                        {
                            fieldId: "builtin.location",
                            entityTypeId: "location"
                        },
                        {
                            fieldId: "name",
                            entityTypeId: "location"
                        }
                    ]
                },



                geolocationOptions: {
                    timeout: 500,
                    maximumAge: 300000,
                    enableHighAccuracy: false
                },
                geolocationTimeoutAlert: {
                    enabled: true,
                    message: "We are unable to determine your location"
                }








            }); this.addComponent("FilterSearch", {
                container: ".filter-search-container",
                verticalKey: "events",
                searchText: "Search",
                query: "Peaceful Coffee",
                filter: {
                    name: {
                        $eq: "Peaceful Coffee"
                    }
                },
                placeholderText: "Enter a cafe name or location",
                searchParameters: {
                    // List of fields to query for
                    sectioned: true,
                    fields: [
                        {
                            fieldId: "builtin.location",
                            entityTypeId: "location"
                        },
                        {
                            fieldId: "name",
                            entityTypeId: "location"
                        }
                    ]
                }
            });




            // this.addComponent("Map", {
            //     container: ".map-container",
            //     mapProvider: "mapbox",
            //     height: "100%",
            //     width: "100%",
            //     showEmptyMap: false,
            //     verticalKey: "locations",
            //     apiKey:
            //         "pk.eyJ1IjoieWV4dCIsImEiOiJqNzVybUhnIn0.hTOO5A1yqfpN42-_z_GuLw"
            //     // clientId: '',
            //     // collapsePins: false,
            //     // zoom: 14,
            //     // defaultPosition: { lat: 37.0902, lng: -95.7129 },
            //     // showEmptyMap: false,
            //     // onPinClick: null,
            //     // onLoaded: function () {},
            //     // noResults: {
            //     //   displayAllResults: false,
            //     //   visible: false
            //     // },

            //     // pin: function () {
            //     //   return {
            //     //     icon: {
            //     //       anchor: null, // e.g. { x: 1, y: 1 }
            //     //       svg: null,
            //     //       url: null,
            //     //       scaledSize: null // e.g. { w: 20, h: 20 }
            //     //     },
            //     //     labelType: 'numeric'
            //     //   };
            //     // }
            // });




            this.addComponent("QASubmission", {
                // Required, the selector for the container element where the component will be injected
                container: ".question-submission-container",
                entityId: "org-1",
                privacyPolicyUrl: "https://mybiz.com/policy"
            });
            this.addComponent("FilterOptions", {
                container: ".filter-options-container",
                control: 'singleoption',
                optionType: 'STATIC_FILTER',
                expand: false,
                options: [
                    {
                        label: 'Pick Up',
                        field: 'pickupAndDeliveryServices',
                        value: "In-Store Pickup"
                    },
                    {
                        label: 'Delivery',
                        field: 'pickupAndDeliveryServices',
                        value: "Delivery"
                    }
                ]
            });




            //         this.addComponent("FilterOptions", {
            //     container: ".filter-options-container",
            //     control: "singleoption",
            //     optionType: "RADIUS_FILTER",
            //     expand: false,
            //     options: [
            //       {
            //         value: 8046.72,
            //         label: "5 miles",
            //         selected: false
            //       },
            //       {
            //         value: 16093.4,
            //         label: "10 miles",
            //         selected: true
            //       },
            //       {
            //         value: 40233.6,
            //         label: "25 miles"
            //       },
            //       {
            //         value: 80467.2,
            //         label: "50 miles"
            //       }
            //     ]
            //   });


            this.addComponent('SortOptions', {
                container: '.sort-options-container',
                verticalKey: 'events',
                options: [
                    {
                        type: 'FIELD',
                        field: 'name',
                        direction: 'ASC',
                        label: 'Popularity',
                    },

                    {
                        type: 'RELEVANCE',
                        label: 'Relevance'
                    }
                ],
            });
            this.addComponent("SpellCheck", {
                // Required, the selector for the container element where the component will be injected
                container: ".spell-check-container",
                suggestionHelpText: "Are you sure you didn't mean: "
            });
            this.addComponent("Navigation", {
                container: ".navigation-container",
            });
            this.addComponent("Facets", {
                container: ".facets-container",
                verticalKey: "events",
                searchOnChange: true,
                searchable: true
            });
            this.addComponent("DirectAnswer", {
                container: ".direct-answer-container",
                footerTextOnSubmission: "Thank you!",
                viewDetailsText: "View Details!",
                //formEl: ".js-directAnswer-feedback-form",
                // thumbsUpSelector: ".js-directAnswer-thumbUp",
                // thumbsDownSelector: ".js-directAnswer-thumbDown",
                // positiveFeedbackSrText: "This answered my question",
                // negativeFeedbackSrText: "This did not answer my question",
                transformData: (data) => {
                    //data has fieldName, fieldType, value
                    return {
                        ...data,
                        answer: {
                            ...data.answer,
                            value: formatDirectAnswer(
                                data.answer.fieldName,
                                data.answer.fieldType,
                                data.answer.value
                            )
                        }
                    };
                }
            });



            this.addComponent("VerticalResults", {
                container: ".vertical-container",
                verticalKey: "events",
                card: {
                    cardType: "Standard",
                    dataMappings: {
                        title: (item) => item.name + "<br>",
                        subtitle: (item) => "<span style='color:blue; font-size:16px;'>" + "Minimum Age:-" + "</span>" + item.ageRange.minValue + "<br>" +

                            "<span style='color:blue; font-size:16px;'>" + "IS Ticket avilable:-" + "</span>" + item.isTicketedEvent + "<br>" +

                            "<span style='color:blue; font-size:16px;'>" + "Performers:-" + "</span>" + item.performers + "<br>",

                        image: (item) =>
                            item.photoGallery ? item.photoGallery[0].image.url : null,
                        url: (item) => item.slug,


                        // transformData: (data) => {
                        //     //data has fieldName, fieldType, value
                        //     return {
                        //         ...data,
                        //         answer: {
                        //             ...data.answer,
                        //             value: formatDirectAnswer(
                        //                 data.answer.fieldName,
                        //                 data.answer.fieldType,
                        //                 data.answer.value
                        //             )
                        //         }
                        //     };
                        // }




                    },
                },

                // template: "this is a pagination demo"
            });


            this.addComponent("Pagination", {
                // Required, the selector for the container element where the component will be injected
                container: ".pagination-container",
                showFirstAndLastButton: true,
                pageLabel: "",
                maxVisiblePagesDesktop: 1,
                //maxVisiblePagesMobile: 3,
                pinFirstAndLastPage: false,

                onPaginate: function (newPageNumber, oldPageNumber, totalPages) {
                    console.log(
                        "I'm going from " +
                        oldPageNumber +
                        " to " +
                        newPageNumber +
                        " and there are " +
                        totalPages +
                        " pages."
                    );
                }
            });


            this.addComponent("LocationBias", {
                container: ".locationbias-container",
            });

        }
    });
</script>
<script>
    function formatDirectAnswer(fieldName, fieldType, value, line1, region, postalCode, countryCode, city, slug, question, answer) {
        if (fieldType == "address") {
            var newFilter = (line1 + '<br>' + region + ' ' + city + '<br>' + countryCode + '<br>' + postalCode);
            return newFilter;

        }

        else if (fieldName == "") {
            fieldName = answer
            // var answer = (line1 + '<br>' + region + ' ' + city + '<br>' + countryCode + '<br>' + postalCode);
            return answer;
        }


        else if (fieldType == "c_related1") {

            var Filter = (line1 + '<br>' + region + ' ' + city + '<br>' + countryCode + '<br>' + postalCode);
            return Filter;
        }


        else {
            return value;
        }
    }
</script>