<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Static Template</title>
    <!-- JS Links -->
    <script src="https://assets.sitescdn.net/answers/v1/answerstemplates.compiled.min.js"></script>
    <script src="https://assets.sitescdn.net/answers/v1/answers.js"></script>
   <link rel="stylesheet" type="text/css" href="https://assets.sitescdn.net/answers/v1/answers.css" />
    <!-- <link rel="stylesheet" type="text/css" href="style.css" /> -->

    <!-- layout styling -->
    <style>
        .answers {
            max-width: 50rem;
            margin: auto;
        }

        .navigation-container {
            margin-top: 0.5rem;
        }

        .filters-and-results-layout {
            display: flex;
            max-width: 70rem;
            margin: auto;
            margin-top: 1rem;
        }
    </style>

    <script>
        function formatDirectAnswer(fieldName, fieldType, value) {
            if (fieldType == "phone") {
                return value
                    .replace(/\D+/g, "")
                    .replace(/(\d{1})(\d{3})(\d{3})(\d{4})/, "$1 ($2) $3-$4");
            }
            return value;
        }
    </script>
</head>

<body>
    <div class="answers">
        <div class="searchbar-container"></div>

        <div class="navigation-container"></div>

        <div class="filter-options-container"></div>
        <div class="spell-check-container"></div>
        <div class="direct-answer-container"></div>
        <div class="map-container"></div>
        <!-- <div class="question-submission-container"></div> -->

    </div>


    <div class="filters-and-results-layout">
        <div class="filter-container"></div>

        <div class="facets-container"></div>
        <div class="sortoptions-container"></div>
        <div class="vertical-container"></div>

    </div>
    <div class="pagination-container"></div>
    <div class="locationbias-container"></div>
    
    <script>
        ANSWERS.init({
            apiKey: "sandbox-c60cbe94e016d1e3c9e6939885a56b0c",
            experienceKey: "healthcare-professional",
            businessId: "3145037",
            experienceVersion: "STAGING",
            verticalKey: "faqs",

 verticalPages: [
                {
                    label: "All",
                    url: "search.html",
                    isFirst: true,
                    isActive: false,
                    hideInNavigation: false,
                    target: "_self",
                },
                {
                    label: "Hospital",
                    url: "hospitallisting.html",
                    verticalKey: "faqs",
                    icon: "pin",
                    // iconUrl: "",
                    isFirst: false,
                    isActive: false,
                    hideInNavigation: false,
                    target: "_blank",
                },
                {
                    label: "Doctor",
                    url: "doctorlisting.html",
                    verticalKey: "healthcare_professionals",
                    icon: "support",
                    // iconUrl: "",
                    isFirst: false,
                    isActive: false,
                    hideInNavigation: false,
                    target: "_blank",
                },
                //verticals for events
                {
                    label: "Jobs",
                    url: "jobslisting.html",
                    verticalKey: "events",
                    icon: "support",
                    // iconUrl: "",
                    isFirst: false,
                    isActive: false,
                    hideInNavigation: false,
                    target: "_blank",
                },
                //verticals for jobs
                {
                    label: "Faq's",
                    url: "faqlisting.html",
                    verticalKey: "jobs",
                    icon: "support",
                    // iconUrl: "",
                    isFirst: false,
                    isActive: true,
                    hideInNavigation: false,
                    target: "_blank",
                },
                //verticals for products
                {
                    label: "Events",
                    url: "eventlisting.html",
                    verticalKey: "products",
                    icon: "support",
                    // iconUrl: "",
                    isFirst: false,
                    isActive: false,
                    hideInNavigation: false,
                    target: "_blank",
                }


            ],






            search: {
                verticalKey: "faqs",
                defaultInitialSearch: "",
                limit: 10
            },
            onReady: function () {
                // init components











                this.addComponent("SearchBar", {
                    container: ".searchbar-container",
                    allowEmptySearch: true,
                    verticalKey: "faqs",





                    placeholderText: "Search faq",
                    searchParameters: {
                        // List of fields to query for
                        sectioned: true,
                        fields: [
                            {
                                fieldId: "builtin.location",
                                entityTypeId: "location"
                            },
                            {
                                fieldId: "name",
                                entityTypeId: "location"
                            }
                        ]
                    },



                    geolocationOptions: {
                        timeout: 500,
                        maximumAge: 300000,
                        enableHighAccuracy: false
                    },
                    geolocationTimeoutAlert: {
                        enabled: true,
                        message: "We are unable to determine your location"
                    }








                }); this.addComponent("FilterSearch", {
                    container: ".filter-search-container",
                    verticalKey: "faqs",
                    searchText: "Search",
                    query: "Peaceful Coffee",
                    filter: {
                        name: {
                            $eq: "Peaceful Coffee"
                        }
                    },
                    placeholderText: "Enter a cafe name or location",
                    searchParameters: {
                        // List of fields to query for
                        sectioned: true,
                        fields: [
                            {
                                fieldId: "builtin.location",
                                entityTypeId: "location"
                            },
                            {
                                fieldId: "name",
                                entityTypeId: "location"
                            }
                        ]
                    }
                });




             




              


                this.addComponent('SortOptions', {
                    container: '.sort-options-container',
                    verticalKey: 'faqs',
                    options: [
                        {
                            type: 'FIELD',
                            field: 'name',
                            direction: 'ASC',
                            label: 'Popularity',
                        },

                        {
                            type: 'RELEVANCE',
                            label: 'Relevance'
                        }
                    ],
                });
                this.addComponent("SpellCheck", {
                  
                    suggestionHelpText: "Are you sure you didn't mean: "
                });
                this.addComponent("Navigation", {
                    container: ".navigation-container",
                });
                this.addComponent("Facets", {
                    container: ".facets-container",
                    verticalKey: "faqs",
                    searchOnChange: true,
                    searchable: true
                });
                this.addComponent("DirectAnswer", {
                    container: ".direct-answer-container",
                    footerTextOnSubmission: "Thank you!",
                    viewDetailsText: "View Details!",
               
                    transformData: (data) => {
                       
                        return {
                            ...data,
                            answer: {
                                ...data.answer,
                                value: formatDirectAnswer(
                                    data.answer.fieldName,
                                    data.answer.fieldType,
                                    data.answer.value
                                )
                            }
                        };
                    }
                });



                this.addComponent("VerticalResults", {
                    container: ".vertical-container",
                    verticalKey: "faqs",
                    card: {
                        cardType: "Standard",
                        dataMappings: {
                            title: (item) => item.name + "<br>",
                            subtitle: (item) => "<span style='color:blue; font-size:16px;'>" + "Experience:-" + "</span>" + item.c_experience + "<br>" +

                                "<span style='color:blue; font-size:16px;'>" + "Known Language:-" + "</span>" + item.languages + "<br>" +

                                "<span style='color:blue; font-size:16px;'>" + "Phone:-" + "</span>" + item.mainPhone + "<br>" + "<br>" + "<p style='color:blue; font-size:16px;'>" + "Details" + "</p>",

                            image: (item) =>
                                item.photoGallery ? item.photoGallery[0].image.url : null,
                            url: (item) => item.slug,


                          



                        },
                    },

                    // template: "this is a pagination demo"
                });


                this.addComponent("Pagination", {
                    // Required, the selector for the container element where the component will be injected
                    container: ".pagination-container",
                    showFirstAndLastButton: true,
                    pageLabel: "",
                    maxVisiblePagesDesktop: 1,
                    //maxVisiblePagesMobile: 3,
                    pinFirstAndLastPage: false,

                    onPaginate: function (newPageNumber, oldPageNumber, totalPages) {
                        console.log(
                            "I'm going from " +
                            oldPageNumber +
                            " to " +
                            newPageNumber +
                            " and there are " +
                            totalPages +
                            " pages."
                        );
                    }
                });


                this.addComponent("LocationBias", {
                    container: ".locationbias-container",
                });

            }
        });
    </script>
</body>

</html>